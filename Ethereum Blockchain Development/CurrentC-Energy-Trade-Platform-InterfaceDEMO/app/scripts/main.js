//Copyright Â© 2018 CurrentC, LLC

/**************************************************************************
 *                       SET PROVIDER/SET DEFAULT ACCOUNT                 *
 **************************************************************************/
//if (typeof web3 !== 'undefined') {
  //  web3 = new Web3(web3.currentProvider);
  //} else {
    // set the provider you want from Web3.providers
    web3 = new Web3(new Web3.providers.HttpProvider("HTTP://127.0.0.1:7545"))
  //}

  //web3.eth.defaultAccount = web3.eth.accounts[0];
  //console.log(web3.eth.defaultAccount);
  //web3.personal.unlockAccount(web3.eth.defaultAccount, "password");
  var defaultNum = 0;
  
  if(!web3.isConnected()) {
    
     console.log("attempting to connect to geth");
     web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545")) ;
  } 

  if(!web3.isConnected()) {
    
     window.alert("You are not connected to an Ethereum node.");
     
  
  } else {
   
     window.alert("Ethereum node connected.");
     web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  }
  
/**************************************************************************
 *                       VARIABLES TO HOLD MAIN CONTRACT                  *
 **************************************************************************/

var contractABI = web3.eth.contract([ { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "acceptedTradeHistory", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "tradeHistory", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "partyAdd", "type": "address" }, { "indexed": true, "name": "tradeAdd", "type": "address" } ], "name": "tradeAccepted", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "partyAdd", "type": "address" }, { "indexed": true, "name": "tradeAdd", "type": "address" } ], "name": "tradeDeclined", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "counterPartyAdd", "type": "address" }, { "indexed": true, "name": "tradeAdd", "type": "address" } ], "name": "tradeSent", "type": "event" }, { "constant": false, "inputs": [], "name": "terminateContract", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "a", "type": "string" }, { "name": "b", "type": "string" } ], "name": "compareStrings", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "receiver", "type": "address" } ], "name": "makePurchaseTrade", "outputs": [ { "name": "tradeContractAddress", "type": "address" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [ { "name": "receiver", "type": "address" } ], "name": "makeSellTrade", "outputs": [ { "name": "tradeContractAddress", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "acceptTradeMain", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "declineTradeMain", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "getOwner", "outputs": [ { "name": "o", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "getTradeIndex", "outputs": [ { "name": "tn", "type": "uint256" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "index", "type": "uint256" } ], "name": "getHistory", "outputs": [ { "name": "t", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]);
var contractBytecode = '0x6060604052341561000f57600080fd5b60006003819055506000600481905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506148718061006e6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313f77b48146100b45780632fd949ca146101175780633b0145301461012c5780635b0c5dbd14610141578063621f0937146101a4578063893d20e8146101b957806396e75ed31461020e578063b138c4ff14610287578063bed34bba146102b0578063c8691b2a14610368578063ddfbff30146103cb575b600080fd5b34156100bf57600080fd5b6100d56004808035906020019091905050610439565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012257600080fd5b61012a610478565b005b341561013757600080fd5b61013f61050d565b005b341561014c57600080fd5b61016260048080359060200190919050506106a6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101af57600080fd5b6101b76106e5565b005b34156101c457600080fd5b6101cc610809565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561021957600080fd5b610245600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610832565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561029257600080fd5b61029a610a13565b6040518082815260200191505060405180910390f35b34156102bb57600080fd5b61034e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610a78565b604051808215151515815260200191505060405180910390f35b341561037357600080fd5b6103896004808035906020019091905050610b51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103f7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60028181548110151561044857fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104d357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009150600090505b6003548110156105a35760018181548110151561053257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561059657600191505b8080600101915050610519565b6001821415156105b257600080fd5b600280548060010182816105c69190610e20565b9160005260206000209001600033909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506004600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6839242a402c7b8f88051961531d7bd92d768d63a372b5da5c4999712a5a904e60405160405180910390a35050565b6001818154811015156106b557fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009150600090505b60035482101561077b5760018281548110151561070a57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561076e57600190505b81806001019250506106f1565b60018114151561078a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4c36d9943bdb4ff9604f6f62ed62f17d0515650c71123e86ea220e354d3ec65360405160405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561089057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836108bb610e4c565b808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051809103906000f080151561093a57600080fd5b9050600180548060010182816109509190610e20565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f4285667a5b999fcc4d2e93133653b8bce0f3614ef5b3c348da2b84e0d882791660405160405180910390a3600160036000828254019250508190555080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7057600080fd5b600354905090565b6000816040518082805190602001908083835b602083101515610ab05780518252602082019150602081019050602083039250610a8b565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040518082805190602001908083835b602083101515610b175780518252602082019150602081019050602083039250610af2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bae57600080fd5b60016003540382111515610bfa57600182815481101515610bcb57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610c88610e5c565b808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051809103906000f0801515610d0757600080fd5b905060018054806001018281610d1d9190610e20565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610dac57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f4285667a5b999fcc4d2e93133653b8bce0f3614ef5b3c348da2b84e0d882791660405160405180910390a3600160036000828254019250508190555080915050919050565b815481835581811511610e4757818360005260206000209182019101610e469190610e6c565b5b505050565b604051611cda80610e9283390190565b604051611cda80612b6c83390190565b610e8e91905b80821115610e8a576000816000905550600101610e72565b5090565b9056006060604052341561000f57600080fd5b604051604080611cda83398101604052808051906020019091908051906020019091905050818180600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505060016023819055505050611bc7806101136000396000f300606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b7d94f9146101985780630b97bc86146101d65780631758078b1461020d5780631efba6c21461029b5780631ff3e123146102cb57806325c843b9146103595780632986c0e5146103e75780632b2b7c48146104175780632ba9fcd51461046c5780632c453bdf146104fa5780632e052c26146105885780632ec8932f1461063a5780632fd26c01146106f957806333a8c45a1461080057806333b33d3d1461088e578063354284f2146108b7578063467ab7f9146109455780634fd4a7dd1461097c57806358d11e01146109a9578063599b68eb14610a235780635f81a57c14610ab15780636f1dda7f14610ae15780637740e4d114610af65780638da5cb5b14610b4b5780639a92a24614610ba0578063ab0d92dd14610bd7578063c24a0f8b14610c07578063c618a1e414610c3e578063e7adb01714610c6e578063f80357b914610cbe578063fa4cbc4114610d0e578063fdea92d414610d18575b005b34156101a357600080fd5b6101d46004808035906020019091908035906020019091908035906020019091908035906020019091905050610d48565b005b34156101e157600080fd5b6101e9610dd2565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561021857600080fd5b610220610dea565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610260578082015181840152602081019050610245565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102a657600080fd5b6102ae610e88565b604051808381526020018281526020019250505060405180910390f35b34156102d657600080fd5b6102de610e9a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031e578082015181840152602081019050610303565b50505050905090810190601f16801561034b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036457600080fd5b61036c610f38565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ac578082015181840152602081019050610391565b50505050905090810190601f1680156103d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f257600080fd5b6103fa610fd6565b604051808381526020018281526020019250505060405180910390f35b341561042257600080fd5b61042a610fe8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047757600080fd5b61047f61100e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104bf5780820151818401526020810190506104a4565b50505050905090810190601f1680156104ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050557600080fd5b61050d6110ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054d578082015181840152602081019050610532565b50505050905090810190601f16801561057a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059357600080fd5b610638600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001909190505061114a565b005b341561064557600080fd5b6106f7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506111ee565b005b341561070457600080fd5b6107fe600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919080359060200190919080359060200190919050506112be565b005b341561080b57600080fd5b610813611390565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610853578082015181840152602081019050610838565b50505050905090810190601f1680156108805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561089957600080fd5b6108a161142e565b6040518082815260200191505060405180910390f35b34156108c257600080fd5b6108ca611434565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561090a5780820151818401526020810190506108ef565b50505050905090810190601f1680156109375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561095057600080fd5b6109586114d2565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561098757600080fd5b61098f6114ea565b604051808215151515815260200191505060405180910390f35b34156109b457600080fd5b610a216004808035151590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919050506114fd565b005b3415610a2e57600080fd5b610a366115a4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a76578082015181840152602081019050610a5b565b50505050905090810190601f168015610aa35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610abc57600080fd5b610ac4611642565b604051808381526020018281526020019250505060405180910390f35b3415610aec57600080fd5b610af4611654565b005b3415610b0157600080fd5b610b0961178c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b5657600080fd5b610b5e6117b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bab57600080fd5b610bb36117d7565b60405180848152602001838152602001828152602001935050505060405180910390f35b3415610be257600080fd5b610bea6117ef565b604051808381526020018281526020019250505060405180910390f35b3415610c1257600080fd5b610c1a611801565b60405180848152602001838152602001828152602001935050505060405180910390f35b3415610c4957600080fd5b610c51611819565b604051808381526020018281526020019250505060405180910390f35b3415610c7957600080fd5b610cbc600480803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190505061182b565b005b3415610cc957600080fd5b610d0c60048080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506118cb565b005b610d1661196a565b005b3415610d2357600080fd5b610d2b611ae4565b604051808381526020018281526020019250505060405180910390f35b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da457600080fd5b8360156000018190555082601560010181905550816018600001819055508060186001018190555050505050565b60018060000154908060010154908060020154905083565b601f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e805780601f10610e5557610100808354040283529160200191610e80565b820191906000526020600020905b815481529060010190602001808311610e6357829003601f168201915b505050505081565b60128060000154908060010154905082565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f305780601f10610f0557610100808354040283529160200191610f30565b820191906000526020600020905b815481529060010190602001808311610f1357829003601f168201915b505050505081565b60178054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fce5780601f10610fa357610100808354040283529160200191610fce565b820191906000526020600020905b815481529060010190602001808311610fb157829003601f168201915b505050505081565b600e8060000154908060010154905082565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60148054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110a45780601f10611079576101008083540402835291602001916110a4565b820191906000526020600020905b81548152906001019060200180831161108757829003601f168201915b505050505081565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111425780601f1061111757610100808354040283529160200191611142565b820191906000526020600020905b81548152906001019060200180831161112557829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a657600080fd5b83600a90805190602001906111bc929190611af6565b5082600890805190602001906111d3929190611af6565b5081601d6000018190555080601d6001018190555050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124a57600080fd5b82600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600790805190602001906112a1929190611af6565b5080601490805190602001906112b8929190611af6565b50505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131a57600080fd5b86600c9080519060200190611330929190611af6565b5085601f9080519060200190611347929190611af6565b50846017908051906020019061135e929190611af6565b5083600e6000018190555082600e60010181905550816010600001819055508060106001018190555050505050505050565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b505050505081565b60235481565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ca5780601f1061149f576101008083540402835291602001916114ca565b820191906000526020600020905b8154815290600101906020018083116114ad57829003601f168201915b505050505081565b601a8060000154908060010154908060020154905083565b600060149054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155957600080fd5b83600060146101000a81548160ff02191690831515021790555082600d9080519060200190611589929190611af6565b50816012600001819055508060126001018190555050505050565b600d8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561163a5780601f1061160f5761010080835404028352916020019161163a565b820191906000526020600020905b81548152906001019060200180831161161d57829003601f168201915b505050505081565b60188060000154908060010154905082565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116b357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff1663621f09376040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561173d57600080fd5b6102c65a03f1151561174e57600080fd5b505050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60208060000154908060010154908060020154905083565b601d8060000154908060010154905082565b60048060000154908060010154908060020154905083565b60158060000154908060010154905082565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188757600080fd5b85601a6000018190555084601a6001018190555083601a60020181905550826020600001819055508160206001018190555080602060020181905550505050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192757600080fd5b8560016000018190555084600180018190555083600160020181905550826004600001819055508160046001018190555080600460020181905550505050505050565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119c957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff16633b0145306040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515611a5357600080fd5b6102c65a03f11515611a6457600080fd5b505050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611ae057600080fd5b5050565b60108060000154908060010154905082565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b3757805160ff1916838001178555611b65565b82800160010185558215611b65579182015b82811115611b64578251825591602001919060010190611b49565b5b509050611b729190611b76565b5090565b611b9891905b80821115611b94576000816000905550600101611b7c565b5090565b905600a165627a7a723058207cffcbbb81fe0c8a4e0d9b55c32937db95a59ac07e3c6e4e56eafbe20c92dda800296060604052341561000f57600080fd5b604051604080611cda83398101604052808051906020019091908051906020019091905050818180600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505060006023819055505050611bc7806101136000396000f300606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b7d94f9146101985780630b97bc86146101d65780631758078b1461020d5780631efba6c21461029b5780631ff3e123146102cb57806325c843b9146103595780632986c0e5146103e75780632b2b7c48146104175780632ba9fcd51461046c5780632c453bdf146104fa5780632e052c26146105885780632ec8932f1461063a5780632fd26c01146106f957806333a8c45a1461080057806333b33d3d1461088e578063354284f2146108b7578063467ab7f9146109455780634fd4a7dd1461097c57806358d11e01146109a9578063599b68eb14610a235780635f81a57c14610ab15780636f1dda7f14610ae15780637740e4d114610af65780638da5cb5b14610b4b5780639a92a24614610ba0578063ab0d92dd14610bd7578063c24a0f8b14610c07578063c618a1e414610c3e578063e7adb01714610c6e578063f80357b914610cbe578063fa4cbc4114610d0e578063fdea92d414610d18575b005b34156101a357600080fd5b6101d46004808035906020019091908035906020019091908035906020019091908035906020019091905050610d48565b005b34156101e157600080fd5b6101e9610dd2565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561021857600080fd5b610220610dea565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610260578082015181840152602081019050610245565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102a657600080fd5b6102ae610e88565b604051808381526020018281526020019250505060405180910390f35b34156102d657600080fd5b6102de610e9a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031e578082015181840152602081019050610303565b50505050905090810190601f16801561034b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036457600080fd5b61036c610f38565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ac578082015181840152602081019050610391565b50505050905090810190601f1680156103d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f257600080fd5b6103fa610fd6565b604051808381526020018281526020019250505060405180910390f35b341561042257600080fd5b61042a610fe8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047757600080fd5b61047f61100e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104bf5780820151818401526020810190506104a4565b50505050905090810190601f1680156104ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050557600080fd5b61050d6110ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054d578082015181840152602081019050610532565b50505050905090810190601f16801561057a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059357600080fd5b610638600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001909190505061114a565b005b341561064557600080fd5b6106f7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506111ee565b005b341561070457600080fd5b6107fe600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919080359060200190919080359060200190919050506112be565b005b341561080b57600080fd5b610813611390565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610853578082015181840152602081019050610838565b50505050905090810190601f1680156108805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561089957600080fd5b6108a161142e565b6040518082815260200191505060405180910390f35b34156108c257600080fd5b6108ca611434565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561090a5780820151818401526020810190506108ef565b50505050905090810190601f1680156109375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561095057600080fd5b6109586114d2565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561098757600080fd5b61098f6114ea565b604051808215151515815260200191505060405180910390f35b34156109b457600080fd5b610a216004808035151590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919050506114fd565b005b3415610a2e57600080fd5b610a366115a4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a76578082015181840152602081019050610a5b565b50505050905090810190601f168015610aa35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610abc57600080fd5b610ac4611642565b604051808381526020018281526020019250505060405180910390f35b3415610aec57600080fd5b610af4611654565b005b3415610b0157600080fd5b610b0961178c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b5657600080fd5b610b5e6117b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bab57600080fd5b610bb36117d7565b60405180848152602001838152602001828152602001935050505060405180910390f35b3415610be257600080fd5b610bea6117ef565b604051808381526020018281526020019250505060405180910390f35b3415610c1257600080fd5b610c1a611801565b60405180848152602001838152602001828152602001935050505060405180910390f35b3415610c4957600080fd5b610c51611819565b604051808381526020018281526020019250505060405180910390f35b3415610c7957600080fd5b610cbc600480803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190803590602001909190505061182b565b005b3415610cc957600080fd5b610d0c60048080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506118cb565b005b610d1661196a565b005b3415610d2357600080fd5b610d2b611ae4565b604051808381526020018281526020019250505060405180910390f35b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da457600080fd5b8360156000018190555082601560010181905550816018600001819055508060186001018190555050505050565b60018060000154908060010154908060020154905083565b601f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e805780601f10610e5557610100808354040283529160200191610e80565b820191906000526020600020905b815481529060010190602001808311610e6357829003601f168201915b505050505081565b60128060000154908060010154905082565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f305780601f10610f0557610100808354040283529160200191610f30565b820191906000526020600020905b815481529060010190602001808311610f1357829003601f168201915b505050505081565b60178054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fce5780601f10610fa357610100808354040283529160200191610fce565b820191906000526020600020905b815481529060010190602001808311610fb157829003601f168201915b505050505081565b600e8060000154908060010154905082565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60148054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110a45780601f10611079576101008083540402835291602001916110a4565b820191906000526020600020905b81548152906001019060200180831161108757829003601f168201915b505050505081565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111425780601f1061111757610100808354040283529160200191611142565b820191906000526020600020905b81548152906001019060200180831161112557829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a657600080fd5b83600a90805190602001906111bc929190611af6565b5082600890805190602001906111d3929190611af6565b5081601d6000018190555080601d6001018190555050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124a57600080fd5b82600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600790805190602001906112a1929190611af6565b5080601490805190602001906112b8929190611af6565b50505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131a57600080fd5b86600c9080519060200190611330929190611af6565b5085601f9080519060200190611347929190611af6565b50846017908051906020019061135e929190611af6565b5083600e6000018190555082600e60010181905550816010600001819055508060106001018190555050505050505050565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b505050505081565b60235481565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ca5780601f1061149f576101008083540402835291602001916114ca565b820191906000526020600020905b8154815290600101906020018083116114ad57829003601f168201915b505050505081565b601a8060000154908060010154908060020154905083565b600060149054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155957600080fd5b83600060146101000a81548160ff02191690831515021790555082600d9080519060200190611589929190611af6565b50816012600001819055508060126001018190555050505050565b600d8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561163a5780601f1061160f5761010080835404028352916020019161163a565b820191906000526020600020905b81548152906001019060200180831161161d57829003601f168201915b505050505081565b60188060000154908060010154905082565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116b357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff1663621f09376040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561173d57600080fd5b6102c65a03f1151561174e57600080fd5b505050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60208060000154908060010154908060020154905083565b601d8060000154908060010154905082565b60048060000154908060010154908060020154905083565b60158060000154908060010154905082565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188757600080fd5b85601a6000018190555084601a6001018190555083601a60020181905550826020600001819055508160206001018190555080602060020181905550505050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192757600080fd5b8560016000018190555084600180018190555083600160020181905550826004600001819055508160046001018190555080600460020181905550505050505050565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119c957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff16633b0145306040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515611a5357600080fd5b6102c65a03f11515611a6457600080fd5b505050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611ae057600080fd5b5050565b60108060000154908060010154905082565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b3757805160ff1916838001178555611b65565b82800160010185558215611b65579182015b82811115611b64578251825591602001919060010190611b49565b5b509050611b729190611b76565b5090565b611b9891905b80821115611b94576000816000905550600101611b7c565b5090565b905600a165627a7a723058205b3bbdbc406c0a6b14e21cd29c8c15c93c8836e96557083c330a3e48dfc962de0029a165627a7a72305820973add60099586f73dbad54a88fb610332c49c38a8d529088f45be9f2eb062740029';
var contractAddress;
var contract;

var event1;
var event1Log = [];
var listenList = new Array();




/**************************************************************************
 *                       VARIABLES TO HOLD TRADE CONTRACTS                *
 **************************************************************************/


var sellContractABI = web3.eth.contract([ { "constant": false, "inputs": [ { "name": "vp", "type": "uint256" }, { "name": "vs", "type": "uint256" }, { "name": "tvp", "type": "uint256" }, { "name": "tvs", "type": "uint256" } ], "name": "setVolumeTV", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "startDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "trader", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "fixedPrice", "outputs": [ { "name": "dollars", "type": "uint256" }, { "name": "cents", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "pipe", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "comments", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "index", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "counterPartyAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "point", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "counterParty", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "p", "type": "string" }, { "name": "cp", "type": "string" }, { "name": "tpd", "type": "uint256" }, { "name": "tpc", "type": "uint256" } ], "name": "setPartyCPTP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "cpa", "type": "address" }, { "name": "pi", "type": "string" }, { "name": "po", "type": "string" } ], "name": "setCounterPartyAddressPP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "c", "type": "string" }, { "name": "t", "type": "string" }, { "name": "com", "type": "string" }, { "name": "ip", "type": "uint256" }, { "name": "iss", "type": "uint256" }, { "name": "ifp", "type": "uint256" }, { "name": "ifs", "type": "uint256" } ], "name": "setContactTCIIF", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "contact", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "internalType", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "party", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "dealDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "firm", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "f", "type": "bool" }, { "name": "pm", "type": "string" }, { "name": "fpd", "type": "uint256" }, { "name": "fpc", "type": "uint256" } ], "name": "setFirmPMFP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "pricingMethod", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalVolume", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "partyAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "enteredOn", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalPrice", "outputs": [ { "name": "dollars", "type": "uint256" }, { "name": "cents", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "endDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "volume", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "dm", "type": "uint256" }, { "name": "dd", "type": "uint256" }, { "name": "dy", "type": "uint256" }, { "name": "eom", "type": "uint256" }, { "name": "eod", "type": "uint256" }, { "name": "eoy", "type": "uint256" } ], "name": "setDealDateEOD", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "sm", "type": "uint256" }, { "name": "sd", "type": "uint256" }, { "name": "sy", "type": "uint256" }, { "name": "em", "type": "uint256" }, { "name": "ed", "type": "uint256" }, { "name": "ey", "type": "uint256" } ], "name": "setDateSE", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "indexFactor", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [ { "name": "p", "type": "address" }, { "name": "cp", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "constant": false, "inputs": [], "name": "acceptTrade", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "declineTrade", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]);
var purchaseContractABI = web3.eth.contract([ { "constant": false, "inputs": [ { "name": "vp", "type": "uint256" }, { "name": "vs", "type": "uint256" }, { "name": "tvp", "type": "uint256" }, { "name": "tvs", "type": "uint256" } ], "name": "setVolumeTV", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "startDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "trader", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "fixedPrice", "outputs": [ { "name": "dollars", "type": "uint256" }, { "name": "cents", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "pipe", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "comments", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "index", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "counterPartyAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "point", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "counterParty", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "p", "type": "string" }, { "name": "cp", "type": "string" }, { "name": "tpd", "type": "uint256" }, { "name": "tpc", "type": "uint256" } ], "name": "setPartyCPTP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "cpa", "type": "address" }, { "name": "pi", "type": "string" }, { "name": "po", "type": "string" } ], "name": "setCounterPartyAddressPP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "c", "type": "string" }, { "name": "t", "type": "string" }, { "name": "com", "type": "string" }, { "name": "ip", "type": "uint256" }, { "name": "iss", "type": "uint256" }, { "name": "ifp", "type": "uint256" }, { "name": "ifs", "type": "uint256" } ], "name": "setContactTCIIF", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "contact", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "internalType", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "party", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "dealDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "firm", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "f", "type": "bool" }, { "name": "pm", "type": "string" }, { "name": "fpd", "type": "uint256" }, { "name": "fpc", "type": "uint256" } ], "name": "setFirmPMFP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "pricingMethod", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalVolume", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "partyAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "enteredOn", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalPrice", "outputs": [ { "name": "dollars", "type": "uint256" }, { "name": "cents", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "endDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "volume", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "dm", "type": "uint256" }, { "name": "dd", "type": "uint256" }, { "name": "dy", "type": "uint256" }, { "name": "eom", "type": "uint256" }, { "name": "eod", "type": "uint256" }, { "name": "eoy", "type": "uint256" } ], "name": "setDealDateEOD", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "sm", "type": "uint256" }, { "name": "sd", "type": "uint256" }, { "name": "sy", "type": "uint256" }, { "name": "em", "type": "uint256" }, { "name": "ed", "type": "uint256" }, { "name": "ey", "type": "uint256" } ], "name": "setDateSE", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "indexFactor", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [ { "name": "p", "type": "address" }, { "name": "cp", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "constant": false, "inputs": [], "name": "acceptTrade", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "declineTrade", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]);
var abstractABI = web3.eth.contract([ { "constant": true, "inputs": [], "name": "startDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "trader", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "fixedPrice", "outputs": [ { "name": "dollars", "type": "uint256" }, { "name": "cents", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "pipe", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "comments", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "index", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "counterPartyAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "point", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "counterParty", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "contact", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "internalType", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "party", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "dealDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "firm", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "pricingMethod", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalVolume", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "partyAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "enteredOn", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalPrice", "outputs": [ { "name": "dollars", "type": "uint256" }, { "name": "cents", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "endDate", "outputs": [ { "name": "month", "type": "uint256" }, { "name": "day", "type": "uint256" }, { "name": "year", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "volume", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "indexFactor", "outputs": [ { "name": "prefix", "type": "uint256" }, { "name": "suffix", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [ { "name": "p", "type": "address" }, { "name": "cp", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "constant": false, "inputs": [ { "name": "f", "type": "bool" }, { "name": "pm", "type": "string" }, { "name": "fpd", "type": "uint256" }, { "name": "fpc", "type": "uint256" } ], "name": "setFirmPMFP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "sm", "type": "uint256" }, { "name": "sd", "type": "uint256" }, { "name": "sy", "type": "uint256" }, { "name": "em", "type": "uint256" }, { "name": "ed", "type": "uint256" }, { "name": "ey", "type": "uint256" } ], "name": "setDateSE", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "cpa", "type": "address" }, { "name": "pi", "type": "string" }, { "name": "po", "type": "string" } ], "name": "setCounterPartyAddressPP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "p", "type": "string" }, { "name": "cp", "type": "string" }, { "name": "tpd", "type": "uint256" }, { "name": "tpc", "type": "uint256" } ], "name": "setPartyCPTP", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "c", "type": "string" }, { "name": "t", "type": "string" }, { "name": "com", "type": "string" }, { "name": "ip", "type": "uint256" }, { "name": "iss", "type": "uint256" }, { "name": "ifp", "type": "uint256" }, { "name": "ifs", "type": "uint256" } ], "name": "setContactTCIIF", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "vp", "type": "uint256" }, { "name": "vs", "type": "uint256" }, { "name": "tvp", "type": "uint256" }, { "name": "tvs", "type": "uint256" } ], "name": "setVolumeTV", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "dm", "type": "uint256" }, { "name": "dd", "type": "uint256" }, { "name": "dy", "type": "uint256" }, { "name": "eom", "type": "uint256" }, { "name": "eod", "type": "uint256" }, { "name": "eoy", "type": "uint256" } ], "name": "setDealDateEOD", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "acceptTrade", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "declineTrade", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]);


updateDeployedTable();

/**************************************************************************
 *                       FOR DEPLOYING MAIN CONTRACT                      *
 **************************************************************************/

function deployMain() {

  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];

  var params = {
    data: contractBytecode,
    gas: 7000000
  }

  contract = contractABI.new(params,function(error,result){
    if(error){
      window.alert("Master Contract could not be deployed!");
    } else {
      window.alert("Master Contract deployed!");
      contractAddress = contract.address;
      showMainAddress();
    }
  });
  while (document.getElementById("deployTable").hasChildNodes()) {
    document.getElementById("deployTable").removeChild(document.getElementById("deployTable").lastChild);
  }
}

/**************************************************************************
 *                       FOR CONNECTING TO EXISTING MASTER CONTRACT       *
 **************************************************************************/
function connectMain() {
  var thisAddress = document.getElementById("masterAddress").value;
  contract = contractABI.at(thisAddress);
  contractAddress = thisAddress;
  showMainAddress();
  updateDeployedTable();
}

function showMainAddress() {
  document.getElementById("mainAddress").textContent = contractAddress;
}

/**************************************************************************
 *                       FOR LISTENING TO OTHER MAIN CONTRACTS            *
 **************************************************************************/

function addListenContract() {
  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  

  while (document.getElementById("listeningContracts").hasChildNodes()) {
    document.getElementById("listeningContracts").removeChild(document.getElementById("listeningContracts").lastChild);
  }

  var thisAddress = document.getElementById("otherAddress").value;
  var check = 0;
  for (var i = 0; i < listenList.length; i++) {
   if (thisAddress == listenList[i])
    check = 1;
  }
  if (check == 0) {
    listenList.push(thisAddress);
    //listenOthers(thisAddress);
  }
  var createTable = document.createElement("table");
  createTable.setAttribute("border", "1");
  
      for (var i = 0; i < listenList.length; i++){
        var createRow = document.createElement('tr');
        var createAddress = document.createElement('td');
        var createName = document.createElement('td');
        var listenAddress = listenList[i];

        createAddress.textContent = listenAddress;
        createName.textContent = document.getElementById("traderName").value;
        createRow.appendChild(createName);
        createRow.appendChild(createAddress);
        createTable.appendChild(createRow);
      }
      document.getElementById("listeningContracts").appendChild(createTable);
      clearRecTable();
  for (var m = 0; m < listenList.length; m++) {
    listenOthers(listenList[m]);
  }
}

function refreshSent() {
  clearRecTable();
  for (var m = 0; m < listenList.length; m++) {
    listenOthers(listenList[m]);
  }
  
}

function refreshSent2() {
  console.log("this");
  updateDeployedTable();
  
}

function clearRecTable() {
  while (document.getElementById("receiveTable").hasChildNodes()) {
    document.getElementById("receiveTable").removeChild(document.getElementById("receiveTable").lastChild);
  }
}

function clearDeployTable() {
  while (document.getElementById("deployTable").hasChildNodes()) {
    document.getElementById("deployTable").removeChild(document.getElementById("deployTable").lastChild);
  }
}

function listenOthers(add) {
  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  var otherAddress = add;
  var thisContract = contractABI.at(otherAddress);
  var myAddress = web3.eth.accounts[defaultNum];

  event1 = thisContract.tradeSent({counterPartyAdd: myAddress},{fromBlock: 0, toBlock: 'latest'});
  var results = event1.get(function(error, logs){
    if (!error) {
      console.log(logs);
      for (var z = 0; z < logs.length; z++) {
      console.log(JSON.stringify(logs[z].args.tradeAdd));
      var readLog = JSON.stringify(logs[z].args.tradeAdd);
      updateReceiveTable(readLog);
      }
    }
    else
      console.log("Could not connect to other trader.");
  });

  //console.log(results);

}



/**************************************************************************
 *                       FOR PURCHASE TRADE                               *
 **************************************************************************/
function sendPurchaseTrade() {
  

  if (contract == undefined) { window.alert("New Master Contract must be connected.")}
  else {
    web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
    var counterPartyAddress = document.getElementById('counterPartyAdd').value;
    var sendValue = web3.toWei(document.getElementById('value').value, 'ether');
    var trader = document.getElementById('trader').value;
    var party = document.getElementById('party').value;
    var counterParty = document.getElementById('counterParty').value;
    var counterPartyAddress = document.getElementById('counterPartyAdd').value;
    var contact = document.getElementById('contact').value;
    var enteredM = document.getElementById('enteredM').value;
    var enteredD = document.getElementById('enteredD').value;
    var enteredY = document.getElementById('enteredY').value;
    var dealDateM = document.getElementById('dealDateM').value;
    var dealDateD = document.getElementById('dealDateD').value;
    var dealDateY = document.getElementById('dealDateY').value;
    var startDateM = document.getElementById('startDateM').value;
    var startDateD = document.getElementById('startDateD').value;
    var startDateY = document.getElementById('startDateY').value;
    var endDateM = document.getElementById('endDateM').value;
    var endDateD = document.getElementById('endDateD').value;
    var endDateY = document.getElementById('endDateY').value;
    var pricingMethod = document.getElementById('pricingMethod').value; 
    var fixedPriceD = document.getElementById('fixedPriceD').value;
    var fixedPriceC = document.getElementById('fixedPriceC').value;
    var totalPriceD = document.getElementById('totalPriceD').value;
    var totalPriceC = document.getElementById('totalPriceC').value;
    var indexW = document.getElementById('indexW').value;
    var indexD = document.getElementById('indexD').value;
    var indexFactorW = document.getElementById('indexFactorW').value;
    var indexFactorD = document.getElementById('indexFactorD').value;
    var pipe = document.getElementById('pipe').value;
    var point = document.getElementById('point').value;
    var volumeW = document.getElementById('volumeW').value;
    var volumeD = document.getElementById('volumeD').value;
    var totalVolumeW = document.getElementById('totalVolumeW').value;
    var totalVolumeD = document.getElementById('totalVolumeD').value;
    var firm = document.getElementById('yes').value;
    var comments = document.getElementById('comments').value;
    
    contract.makePurchaseTrade(counterPartyAddress, {value: sendValue, gas: 2600000}, function(error, result){
      if(!error)
      window.alert("Purchase trade contract successfully deployed");
      else 
        window.alert("Purchase trade contract could not be deployed");
    });

    var lastTradeIndex = contract.getTradeIndex.call().c - 1;
    
    var newAdd = contract.getHistory.call(lastTradeIndex);


    var purchaseContractAddress = newAdd;
    var purchaseContract = purchaseContractABI.at(purchaseContractAddress);
    
    //purchaseContract.setFirm(firm);
    //purchaseContract.setStartDate(startDateM,startDateD,startDateY);
    //purchaseContract.setEndDate(endDateM,endDateD,endDateY);
    purchaseContract.setDateSE(startDateM,startDateD,startDateY,endDateM,endDateD,endDateY, {gas:1000001});
    purchaseContract.setFirmPMFP(firm, pricingMethod,fixedPriceD, fixedPriceC, {gas:1000002});
    //purchaseContract.setTotalPrice(totalPriceD, totalPriceC, {gas:1000003});
    purchaseContract.setPartyCPTP(party, counterParty, totalPriceD, totalPriceC, {gas:1000004});
    purchaseContract.setCounterPartyAddressPP(counterPartyAddress, pipe, point, {gas:1000005});
    purchaseContract.setContactTCIIF(contact, trader, comments, indexW, indexD, indexFactorW, indexFactorD, {gas:1000006});
    purchaseContract.setVolumeTV(volumeW, volumeD, totalVolumeW, totalVolumeD, {gas:1000007});
    purchaseContract.setDealDateEOD(dealDateM, dealDateD, dealDateY, enteredM, enteredD, enteredY, {gas:1000008});


    /*
    var addAddress = document.createElement('tr');
    addAddress.textContent = newAdd + "--------------" + "Purchase";
    document.getElementById('deployTable').appendChild(addAddress);
    */
    updateDeployedTable();
  }
}

/**************************************************************************
 *                       FOR SELL TRADE                               *
 **************************************************************************/
function sendSellTrade() {

  if (contract == undefined) { window.alert("New Master Contract must be created.")}
  else {
    web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
    var counterPartyAddress = document.getElementById('counterPartyAdd').value;
    var trader = document.getElementById('trader').value;
    var party = document.getElementById('party').value;
    var counterParty = document.getElementById('counterParty').value;
    var counterPartyAddress = document.getElementById('counterPartyAdd').value;
    var contact = document.getElementById('contact').value;
    var enteredM = document.getElementById('enteredM').value;
    var enteredD = document.getElementById('enteredD').value;
    var enteredY = document.getElementById('enteredY').value;
    var dealDateM = document.getElementById('dealDateM').value;
    var dealDateD = document.getElementById('dealDateD').value;
    var dealDateY = document.getElementById('dealDateY').value;
    var startDateM = document.getElementById('startDateM').value;
    var startDateD = document.getElementById('startDateD').value;
    var startDateY = document.getElementById('startDateY').value;
    var endDateM = document.getElementById('endDateM').value;
    var endDateD = document.getElementById('endDateD').value;
    var endDateY = document.getElementById('endDateY').value;
    var pricingMethod = document.getElementById('pricingMethod').value; 
    var fixedPriceD = document.getElementById('fixedPriceD').value;
    var fixedPriceC = document.getElementById('fixedPriceC').value;
    var totalPriceD = document.getElementById('totalPriceD').value;
    var totalPriceC = document.getElementById('totalPriceC').value;
    var indexW = document.getElementById('indexW').value;
    var indexD = document.getElementById('indexD').value;
    var indexFactorW = document.getElementById('indexFactorW').value;
    var indexFactorD = document.getElementById('indexFactorD').value;
    var pipe = document.getElementById('pipe').value;
    var point = document.getElementById('point').value;
    var volumeW = document.getElementById('volumeW').value;
    var volumeD = document.getElementById('volumeD').value;
    var totalVolumeW = document.getElementById('totalVolumeW').value;
    var totalVolumeD = document.getElementById('totalVolumeD').value;
    var firm = document.getElementById('yes').value;
    var comments = document.getElementById('comments').value;
    
    contract.makeSellTrade(counterPartyAddress, {gas: 2600000}, function(error, result){
      if(!error)
      window.alert("Sell trade contract successfully deployed");
      else 
        window.alert("Sell trade contract could not be deployed");
    });

    var lastTradeIndex = contract.getTradeIndex.call().c - 1;
    
    var newAdd = contract.getHistory.call(lastTradeIndex);


    var sellContractAddress = newAdd;
    var sellContract = sellContractABI.at(sellContractAddress);
    
    //purchaseContract.setFirm(firm);
    //purchaseContract.setStartDate(startDateM,startDateD,startDateY);
    //purchaseContract.setEndDate(endDateM,endDateD,endDateY);
    sellContract.setDateSE(startDateM,startDateD,startDateY,endDateM,endDateD,endDateY, {gas:1000001});
    sellContract.setFirmPMFP(firm, pricingMethod,fixedPriceD, fixedPriceC, {gas:1000002});
    //purchaseContract.setTotalPrice(totalPriceD, totalPriceC, {gas:1000003});
    sellContract.setPartyCPTP(party, counterParty, totalPriceD, totalPriceC, {gas:1000004});
    sellContract.setCounterPartyAddressPP(counterPartyAddress, pipe, point, {gas:1000005});
    sellContract.setContactTCIIF(contact, trader, comments, indexW, indexD, indexFactorW, indexFactorD, {gas:1000006});
    sellContract.setVolumeTV(volumeW, volumeD, totalVolumeW, totalVolumeD, {gas:1000007});
    sellContract.setDealDateEOD(dealDateM, dealDateD, dealDateY, enteredM, enteredD, enteredY, {gas:1000008});
    
    window.alert("Sell trade contract successfully deployed!");
    
    updateDeployedTable();
  }
}


/**************************************************************************
 *                       FOR KEEPING TRACK OF DEPLOYED CONTRACTS          *
 **************************************************************************/

function updateDeployedTable() {
  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  
  var deployedNum = contract.getTradeIndex.call();

  while (document.getElementById("deployTable").hasChildNodes()) {
    document.getElementById("deployTable").removeChild(document.getElementById("deployTable").lastChild);
  }

    for (var i = 0; i < deployedNum; i++){
      var createRow = document.createElement('tr');
      var addButton = document.createElement("button");
      var addType = document.createElement('td');
      var addIndex = document.createElement('td');
      var addTo = document.createElement('td');
      var deployedAddress = contract.getHistory.call(i);
      var thisTrade = abstractABI.at(deployedAddress);
      var sellOrBuy = thisTrade.internalType.call();
      var type;
      var prefix;
      if (sellOrBuy == 0){
        type = "Purchase";
        prefix = "From: ";
        var sendString = "readContract(0,"+"'"+deployedAddress+"'"+")";
        addButton.setAttribute("onClick", sendString);

      }
      else {
        type = "Sell";
        prefix = "To: ";
        var sendString = "readContract(1,"+"'"+deployedAddress+"'"+")";
        addButton.setAttribute("onClick", sendString);
      }



      addButton.textContent = deployedAddress;
      addType.textContent = type;
      addIndex.textContent = i+1;
      addTo.textContent = prefix +thisTrade.counterParty.call();
      createRow.appendChild(addIndex);
      createRow.appendChild(addType);
      createRow.appendChild(addTo);
      createRow.appendChild(addButton);
      document.getElementById("deployTable").appendChild(createRow);



    }
   
}

function updateReceiveTable(arr) {
  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  
/*
  while (document.getElementById("receiveTable").hasChildNodes()) {
    document.getElementById("receiveTable").removeChild(document.getElementById("receiveTable").lastChild);
  }
*/
   // for (var i = 0; i < recNum; i++){
      var createRow = document.createElement('tr');
      var addButton = document.createElement("button");
      var addType = document.createElement('td');
      var addIndex = document.createElement('td');
      var addTo = document.createElement('td');

      var recAddressPre = arr;
      var recAddress = recAddressPre.slice(1,43);
      console.log(recAddress);
      
      //var deployedAddress = contract.getHistory.call(i);
      var thisTrade = abstractABI.at(recAddress);
      console.log("step 1");
      var sellOrBuy = thisTrade.internalType.call();
      console.log("step 2")
      var type;
      var prefix;
      if (sellOrBuy == 0){
        type = "Purchase";
        prefix = "From: ";
        var sendString = "readRecContract(0,"+"'"+recAddress+"'"+")";
        addButton.setAttribute("onClick", sendString);
        //thisTrade = purchaseContractABI.at(recAddress);

      }
      else {
        type = "Sell";
        prefix = "To: ";
        var sendString = "readRecContract(1,"+"'"+recAddress+"'"+")";
        addButton.setAttribute("onClick", sendString);
        //thisTrade = purchaseContractABI.at(recAddress);
      }
      


      addButton.textContent = arr;
      addType.textContent = type;
      //addIndex.textContent = i+1;
      addTo.textContent = prefix +thisTrade.counterParty.call();
      //createRow.appendChild(addIndex);
      createRow.appendChild(addType);
      createRow.appendChild(addTo);
      createRow.appendChild(addButton);
      document.getElementById("receiveTable").appendChild(createRow);



   // }
   
}

/**************************************************************************
 *                       FOR READING DEPLOYED CONTRACTS                   *
 **************************************************************************/
function readContract(type, address) {

  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  var thisABI;
  var tradeType

  while (document.getElementById("readContracts").hasChildNodes()) {
    document.getElementById("readContracts").removeChild(document.getElementById("readContracts").lastChild);
  }

  if (type == 0){
    thisABI = purchaseContractABI;
    tradeType =  "Purchase";
  }

  else if (type == 1) {
    thisABI = sellContractABI;
    tradeType = "Sell";
  }

  var thisTrade = thisABI.at(address);


  var createTable = document.createElement("table");
  createTable.setAttribute("border", "1");
  createTable.setAttribute("id", "readTable");

  var nameDiv = document.createElement("label");
  nameDiv.textContent = "Deployed Trade (trade you sent)";

  var row0 = document.createElement("tr");
  var nameVal = document.createElement("td");
  var dataVal = document.createElement("td");

  var row1 = document.createElement("tr");
  var nameT = document.createElement("td");
  var dataT = document.createElement("td");

  var row2 = document.createElement("tr");
  var nameTT = document.createElement("td");
  var dataTT = document.createElement("td");

  var row3 = document.createElement("tr");
  var nameP = document.createElement("td");
  var dataP = document.createElement("td");
  var dataPA = document.createElement("td");


  var row4 = document.createElement("tr");
  var nameCP = document.createElement("td");
  var dataCP = document.createElement("td");
  var dataCPA = document.createElement("td");

  var row5 = document.createElement("tr");
  var nameC = document.createElement("td");
  var dataC = document.createElement("td");

  var row6 = document.createElement("tr");
  var nameEO = document.createElement("td");
  var dataEO = document.createElement("td");

  var row7 = document.createElement("tr");
  var nameDD = document.createElement("td");
  var dataDD = document.createElement("td");

  var row8 = document.createElement("tr");
  var nameSD = document.createElement("td");
  var dataSD = document.createElement("td");

  var row9 = document.createElement("tr");
  var nameED = document.createElement("td");
  var dataED = document.createElement("td");

  var row10 = document.createElement("tr");
  var namePM = document.createElement("td");
  var dataPM = document.createElement("td");

  var row11 = document.createElement("tr");
  var nameFP = document.createElement("td");
  var dataFP = document.createElement("td");

  var row12 = document.createElement("tr");
  var nameTP = document.createElement("td");
  var dataTP = document.createElement("td");

  var row13 = document.createElement("tr");
  var nameI = document.createElement("td");
  var dataI = document.createElement("td");

  var row14 = document.createElement("tr");
  var nameIF = document.createElement("td");
  var dataIF = document.createElement("td");

  var row15 = document.createElement("tr");
  var namePI = document.createElement("td");
  var dataPI = document.createElement("td");

  var row16 = document.createElement("tr");
  var namePO = document.createElement("td");
  var dataPO = document.createElement("td");

  var row17 = document.createElement("tr");
  var nameV = document.createElement("td");
  var dataV = document.createElement("td");

  var row18 = document.createElement("tr");
  var nameTV = document.createElement("td");
  var dataTV = document.createElement("td");

  var row19 = document.createElement("tr");
  var nameF = document.createElement("td");
  var dataF = document.createElement("td");

  var row20 = document.createElement("tr");
  var nameCOM = document.createElement("td");
  var dataCOM = document.createElement("td");

  nameVal.textContent = "Value (in Ether)"
  nameT.textContent = "Trader: ";
  nameTT.textContent = "Trade Type: ";
  nameP.textContent = "Party: ";
  nameCP.textContent = "Counter Party: ";
  nameC.textContent = "Contact: ";
  nameEO.textContent = "Entered On Date: ";
  nameDD.textContent = "Deal Date: ";
  nameSD.textContent = "Start Date: ";
  nameED.textContent = "End Date: ";
  namePM.textContent = "Pricing Method: ";
  nameFP.textContent = "Fixed Price: ";
  nameTP.textContent = "Total Price: ";
  nameI.textContent = "Index: ";
  nameIF.textContent = "Index Factor: ";
  namePI.textContent = "Pipe: ";
  namePO.textContent = "Point: ";
  nameV.textContent = "Volume: ";
  nameTV.textContent = "Total Volume: ";
  nameF.textContent = "Firm: ";
  nameCOM.textContent = "Comments: ";

  dataVal.textContent = web3.fromWei(web3.eth.getBalance(address), 'ether');
  dataT.textContent = thisTrade.trader.call();
  dataTT.textContent = tradeType;
  dataP.textContent = thisTrade.party.call();
  dataPA.textContent = thisTrade.partyAddress.call();
  dataCP.textContent = thisTrade.counterParty.call();
  dataCPA.textContent = thisTrade.counterPartyAddress.call();
  dataC.textContent = thisTrade.contact.call();
  var structED = thisTrade.endDate.call();
  dataED.textContent = structED[0]+"/"+structED[1]+"/"+structED[2];
  dataPM.textContent = thisTrade.pricingMethod.call();
  var structFP = thisTrade.fixedPrice.call();
  dataFP.textContent = "$"+structFP[0]+"."+structFP[1];
  var structTP = thisTrade.totalPrice.call();
  dataTP.textContent = "$"+structTP[0]+"."+structTP[1];
  var structI = thisTrade.index.call();
  dataI.textContent = structI[0]+"."+structI[1];
  var structIF = thisTrade.indexFactor.call();
  dataIF.textContent = structIF[0] +"."+structIF[1];
  dataPI.textContent = thisTrade.pipe.call();
  dataPO.textContent = thisTrade.point.call();
  var structV = thisTrade.volume.call();
  dataV.textContent = structV[0]+"."+structV[1];
  var structTV = thisTrade.totalVolume.call();
  dataTV.textContent = structTV[0]+"."+structTV[1];
  dataF.textContent = thisTrade.firm.call();
  dataCOM.textContent = thisTrade.comments.call();

  row0.appendChild(nameVal);
  row0.appendChild(dataVal);
  row1.appendChild(nameT);
  row1.appendChild(dataT);
  row2.appendChild(nameTT);
  row2.appendChild(dataTT);
  row3.appendChild(nameP);
  row3.appendChild(dataP);
  row3.appendChild(dataPA);
  row4.appendChild(nameCP);
  row4.appendChild(dataCP);
  row4.appendChild(dataCPA);
  row5.appendChild(nameC);
  row5.appendChild(dataC);
  row6.appendChild(nameEO);
  row6.appendChild(dataEO);
  row7.appendChild(nameDD);
  row7.appendChild(dataDD);
  row8.appendChild(nameSD);
  row8.appendChild(dataSD);
  row9.appendChild(nameED);
  row9.appendChild(dataED);
  row10.appendChild(namePM);
  row10.appendChild(dataPM);
  row11.appendChild(nameFP);
  row11.appendChild(dataFP);
  row12.appendChild(nameTP);
  row12.appendChild(dataTP);
  row13.appendChild(nameIF);
  row13.appendChild(dataIF);
  row15.appendChild(namePI);
  row15.appendChild(dataPI);
  row16.appendChild(namePO);
  row16.appendChild(dataPO);
  row17.appendChild(nameV);
  row17.appendChild(dataV);
  row18.appendChild(nameTV);
  row18.appendChild(dataTV);
  row19.appendChild(nameF);
  row19.appendChild(dataF);
  row20.appendChild(nameCOM);
  row20.appendChild(dataCOM);

  createTable.appendChild(row0);
  createTable.appendChild(row1);
  createTable.appendChild(row2);
  createTable.appendChild(row3);
  createTable.appendChild(row4);
  createTable.appendChild(row5);
  createTable.appendChild(row6);
  createTable.appendChild(row7);
  createTable.appendChild(row8);
  createTable.appendChild(row9);
  createTable.appendChild(row10);
  createTable.appendChild(row11);
  createTable.appendChild(row12);
  createTable.appendChild(row13);
  createTable.appendChild(row14);
  createTable.appendChild(row15);
  createTable.appendChild(row16);
  createTable.appendChild(row17);
  createTable.appendChild(row18);
  createTable.appendChild(row19);
  createTable.appendChild(row20);

  document.getElementById("readContracts").appendChild(nameDiv);
  document.getElementById("readContracts").appendChild(createTable);

}

function readRecContract(type, address) {
  
    web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
    var thisABI;
    var tradeType
  
    while (document.getElementById("readContracts").hasChildNodes()) {
      document.getElementById("readContracts").removeChild(document.getElementById("readContracts").lastChild);
    }
  
    if (type == 0){
      thisABI = purchaseContractABI;
      tradeType =  "Purchase";
    }
  
    else if (type == 1) {
      thisABI = sellContractABI;
      tradeType = "Sell";
    }
  
    var thisTrade = thisABI.at(address);

    var rowX = document.createElement("tr");
    var addValue = document.createElement("input");
    var valueName = document.createElement("td")
    var valueData = document.createElement("td");
    valueName.textContent = "Value to send (Ether):";
    addValue.setAttribute("id", "addvalue");
    addValue.setAttribute("placeholder", "Ether: ");
  
    var nameDiv = document.createElement("label");
    nameDiv.textContent = "Received Trade (trade sent to you)";

    var createTable = document.createElement("table");
    createTable.setAttribute("border", "1");
    createTable.setAttribute("id", "readTable");

    var row0 = document.createElement("tr");
    var nameVal = document.createElement("td");
    var dataVal = document.createElement("td");

    var row1 = document.createElement("tr");
    var nameT = document.createElement("td");
    var dataT = document.createElement("td");
  
    var row2 = document.createElement("tr");
    var nameTT = document.createElement("td");
    var dataTT = document.createElement("td");
  
    var row3 = document.createElement("tr");
    var nameP = document.createElement("td");
    var dataP = document.createElement("td");
    var dataPA = document.createElement("td");
  
  
    var row4 = document.createElement("tr");
    var nameCP = document.createElement("td");
    var dataCP = document.createElement("td");
    var dataCPA = document.createElement("td");
  
    var row5 = document.createElement("tr");
    var nameC = document.createElement("td");
    var dataC = document.createElement("td");
  
    var row6 = document.createElement("tr");
    var nameEO = document.createElement("td");
    var dataEO = document.createElement("td");
  
    var row7 = document.createElement("tr");
    var nameDD = document.createElement("td");
    var dataDD = document.createElement("td");
  
    var row8 = document.createElement("tr");
    var nameSD = document.createElement("td");
    var dataSD = document.createElement("td");
  
    var row9 = document.createElement("tr");
    var nameED = document.createElement("td");
    var dataED = document.createElement("td");
  
    var row10 = document.createElement("tr");
    var namePM = document.createElement("td");
    var dataPM = document.createElement("td");
  
    var row11 = document.createElement("tr");
    var nameFP = document.createElement("td");
    var dataFP = document.createElement("td");
  
    var row12 = document.createElement("tr");
    var nameTP = document.createElement("td");
    var dataTP = document.createElement("td");
  
    var row13 = document.createElement("tr");
    var nameI = document.createElement("td");
    var dataI = document.createElement("td");
  
    var row14 = document.createElement("tr");
    var nameIF = document.createElement("td");
    var dataIF = document.createElement("td");
  
    var row15 = document.createElement("tr");
    var namePI = document.createElement("td");
    var dataPI = document.createElement("td");
  
    var row16 = document.createElement("tr");
    var namePO = document.createElement("td");
    var dataPO = document.createElement("td");
  
    var row17 = document.createElement("tr");
    var nameV = document.createElement("td");
    var dataV = document.createElement("td");
  
    var row18 = document.createElement("tr");
    var nameTV = document.createElement("td");
    var dataTV = document.createElement("td");
  
    var row19 = document.createElement("tr");
    var nameF = document.createElement("td");
    var dataF = document.createElement("td");
  
    var row20 = document.createElement("tr");
    var nameCOM = document.createElement("td");
    var dataCOM = document.createElement("td");

    var row21 = document.createElement("tr");
    var acceptButton = document.createElement("button");
    var declineButton = document.createElement("button");

    nameVal.textContent = "Value (in Ether)"
    nameT.textContent = "Trader: ";
    nameTT.textContent = "Trade Type: ";
    nameP.textContent = "Party: ";
    nameCP.textContent = "Counter Party: ";
    nameC.textContent = "Contact: ";
    nameEO.textContent = "Entered On Date: ";
    nameDD.textContent = "Deal Date: ";
    nameSD.textContent = "Start Date: ";
    nameED.textContent = "End Date: ";
    namePM.textContent = "Pricing Method: ";
    nameFP.textContent = "Fixed Price: ";
    nameTP.textContent = "Total Price: ";
    nameI.textContent = "Index: ";
    nameIF.textContent = "Index Factor: ";
    namePI.textContent = "Pipe: ";
    namePO.textContent = "Point: ";
    nameV.textContent = "Volume: ";
    nameTV.textContent = "Total Volume: ";
    nameF.textContent = "Firm: ";
    nameCOM.textContent = "Comments: ";
    acceptButton.textContent = "Accept";
    declineButton.textContent = "Decline";
    var sendString2 = "acceptTrade("+type+","+"'"+address+"'"+")";
    var sendString3 = "declineTrade("+type+","+"'"+address+"'"+")";
    acceptButton.setAttribute("onclick", sendString2);
    declineButton.setAttribute("onclick", sendString3);
  
    dataVal.textContent = web3.fromWei(web3.eth.getBalance(address), 'ether');
    dataT.textContent = thisTrade.trader.call();
    dataTT.textContent = tradeType;
    dataP.textContent = thisTrade.party.call();
    dataPA.textContent = thisTrade.partyAddress.call();
    dataCP.textContent = thisTrade.counterParty.call();
    dataCPA.textContent = thisTrade.counterPartyAddress.call();
    dataC.textContent = thisTrade.contact.call();
    var structED = thisTrade.endDate.call();
    dataED.textContent = structED[0]+"/"+structED[1]+"/"+structED[2];
    dataPM.textContent = thisTrade.pricingMethod.call();
    var structFP = thisTrade.fixedPrice.call();
    dataFP.textContent = "$"+structFP[0]+"."+structFP[1];
    var structTP = thisTrade.totalPrice.call();
    dataTP.textContent = "$"+structTP[0]+"."+structTP[1];
    var structI = thisTrade.index.call();
    dataI.textContent = structI[0]+"."+structI[1];
    var structIF = thisTrade.indexFactor.call();
    dataIF.textContent = structIF[0] +"."+structIF[1];
    dataPI.textContent = thisTrade.pipe.call();
    dataPO.textContent = thisTrade.point.call();
    var structV = thisTrade.volume.call();
    dataV.textContent = structV[0]+"."+structV[1];
    var structTV = thisTrade.totalVolume.call();
    dataTV.textContent = structTV[0]+"."+structTV[1];
    dataF.textContent = thisTrade.firm.call();
    dataCOM.textContent = thisTrade.comments.call();
  
    row0.appendChild(nameVal);
    row0.appendChild(dataVal);
    row1.appendChild(nameT);
    row1.appendChild(dataT);
    row2.appendChild(nameTT);
    row2.appendChild(dataTT);
    row3.appendChild(nameP);
    row3.appendChild(dataP);
    row3.appendChild(dataPA);
    row4.appendChild(nameCP);
    row4.appendChild(dataCP);
    row4.appendChild(dataCPA);
    row5.appendChild(nameC);
    row5.appendChild(dataC);
    row6.appendChild(nameEO);
    row6.appendChild(dataEO);
    row7.appendChild(nameDD);
    row7.appendChild(dataDD);
    row8.appendChild(nameSD);
    row8.appendChild(dataSD);
    row9.appendChild(nameED);
    row9.appendChild(dataED);
    row10.appendChild(namePM);
    row10.appendChild(dataPM);
    row11.appendChild(nameFP);
    row11.appendChild(dataFP);
    row12.appendChild(nameTP);
    row12.appendChild(dataTP);
    row13.appendChild(nameIF);
    row13.appendChild(dataIF);
    row15.appendChild(namePI);
    row15.appendChild(dataPI);
    row16.appendChild(namePO);
    row16.appendChild(dataPO);
    row17.appendChild(nameV);
    row17.appendChild(dataV);
    row18.appendChild(nameTV);
    row18.appendChild(dataTV);
    row19.appendChild(nameF);
    row19.appendChild(dataF);
    row20.appendChild(nameCOM);
    row20.appendChild(dataCOM);
    row21.appendChild(acceptButton);
    row21.appendChild(declineButton);
    valueData.appendChild(addValue);

    if (type ==1) {
      rowX.appendChild(valueName);
      rowX.appendChild(valueData);
    }
  
    createTable.appendChild(row0);
    createTable.appendChild(row1);
    createTable.appendChild(row2);
    createTable.appendChild(row3);
    createTable.appendChild(row4);
    createTable.appendChild(row5);
    createTable.appendChild(row6);
    createTable.appendChild(row7);
    createTable.appendChild(row8);
    createTable.appendChild(row9);
    createTable.appendChild(row10);
    createTable.appendChild(row11);
    createTable.appendChild(row12);
    createTable.appendChild(row13);
    createTable.appendChild(row14);
    createTable.appendChild(row15);
    createTable.appendChild(row16);
    createTable.appendChild(row17);
    createTable.appendChild(row18);
    createTable.appendChild(row19);
    createTable.appendChild(row20);
    createTable.appendChild(row21);
    createTable.appendChild(rowX);
  
    document.getElementById("readContracts").appendChild(nameDiv);
    document.getElementById("readContracts").appendChild(createTable);
  
  }

function acceptTrade(type,address) {
  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  var thisContract;
  
  console.log(address);
  console.log(type);
  if (type == 0) {
    thisContract = purchaseContractABI.at(address)
    console.log("purchase");
    thisContract.acceptTrade({gas:1000000});
  }
  else if (type == 1) {
    thisContract = sellContractABI.at(address)
    console.log("sell");
    var val = document.getElementById("addvalue").value;
    var weiVal = web3.toWei(val, 'ether');
    thisContract.acceptTrade({value:weiVal, gas:1000000});
  }
}

function declineTrade(type, address) {
  web3.eth.defaultAccount = web3.eth.accounts[defaultNum];
  var thisContract;
  if (type == 0) {
    thisContract = purchaseContractABI.at(address)
    console.log("purchase");
  }
  else if (type == 1) {
    thisContract = sellContractABI.at(address)
    console.log("sell");
  }

  thisContract.declineTrade({gas:1000000});
}

function setDefault() {
  var def = document.getElementById("addressIndex").value;
  defaultNum = def;
}
